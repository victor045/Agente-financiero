"""
Demo script para probar el Financial Agent con datos reales.
Ejecuta este script para ver el agente en acci√≥n.
"""

import pandas as pd
import numpy as np
from pathlib import Path
import logging

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def demo_data_analysis():
    """Demo del an√°lisis de datos reales."""
    print("üöÄ DEMO: Financial Agent - An√°lisis de Datos Reales")
    print("=" * 60)
    
    # Cargar datos reales
    data_directory = Path("Datasets v2/Datasets v2")
    
    if not data_directory.exists():
        print("‚ùå Error: No se encontr√≥ el directorio de datos")
        print("Aseg√∫rate de que los archivos Excel est√©n en: Datasets v2/Datasets v2/")
        return
    
    print("üìä Cargando datos reales...")
    
    # Cargar facturas
    facturas_path = data_directory / "facturas.xlsx"
    if facturas_path.exists():
        facturas_df = pd.read_excel(facturas_path)
        print(f"‚úÖ facturas.xlsx cargado: {len(facturas_df)} facturas")
        
        # An√°lisis b√°sico
        if 'Monto (MXN)' in facturas_df.columns:
            total = facturas_df['Monto (MXN)'].sum()
            print(f"   üí∞ Total facturas: ${total:,.2f} MXN")
            
            if 'Tipo' in facturas_df.columns:
                por_cobrar = facturas_df[facturas_df['Tipo'] == 'Por cobrar']['Monto (MXN)'].sum()
                por_pagar = facturas_df[facturas_df['Tipo'] == 'Por pagar']['Monto (MXN)'].sum()
                print(f"   üìà Por cobrar: ${por_cobrar:,.2f} MXN")
                print(f"   üìâ Por pagar: ${por_pagar:,.2f} MXN")
    else:
        print("‚ùå facturas.xlsx no encontrado")
    
    # Cargar gastos fijos
    gastos_path = data_directory / "gastos_fijos.xlsx"
    if gastos_path.exists():
        gastos_df = pd.read_excel(gastos_path)
        print(f"‚úÖ gastos_fijos.xlsx cargado: {len(gastos_df)} gastos")
        
        if 'Monto (MXN)' in gastos_df.columns:
            total_gastos = gastos_df['Monto (MXN)'].sum()
            print(f"   üí∞ Total gastos fijos: ${total_gastos:,.2f} MXN")
            
            if 'Gasto Fijo' in gastos_df.columns:
                print("   üìã Categor√≠as de gastos:")
                for _, row in gastos_df.iterrows():
                    print(f"      - {row['Gasto Fijo']}: ${row['Monto (MXN)']:,.2f}")
    else:
        print("‚ùå gastos_fijos.xlsx no encontrado")
    
    # Cargar estado de cuenta
    estado_path = data_directory / "Estado_cuenta.xlsx"
    if estado_path.exists():
        estado_df = pd.read_excel(estado_path)
        print(f"‚úÖ Estado_cuenta.xlsx cargado: {len(estado_df)} movimientos")
        
        if 'Monto de la transacci√≥n (MXN)' in estado_df.columns:
            ingresos = estado_df[estado_df['Monto de la transacci√≥n (MXN)'] > 0]['Monto de la transacci√≥n (MXN)'].sum()
            egresos = estado_df[estado_df['Monto de la transacci√≥n (MXN)'] < 0]['Monto de la transacci√≥n (MXN)'].sum()
            neto = ingresos + egresos
            
            print(f"   üí∞ Ingresos: ${ingresos:,.2f} MXN")
            print(f"   üí∏ Egresos: ${abs(egresos):,.2f} MXN")
            print(f"   üìä Flujo neto: ${neto:,.2f} MXN")
    else:
        print("‚ùå Estado_cuenta.xlsx no encontrado")


def demo_questions():
    """Demo de preguntas que el agente puede responder."""
    print("\n" + "=" * 60)
    print("‚ùì PREGUNTAS QUE EL AGENTE PUEDE RESPONDER")
    print("=" * 60)
    
    questions = [
        "¬øCu√°l es el total de facturas emitidas?",
        "¬øCu√°l es el promedio de las facturas?",
        "¬øCu√°les son mis clientes principales?",
        "¬øC√≥mo se distribuyen las facturas por tipo (por cobrar vs por pagar)?",
        "¬øCu√°les son mis gastos fijos m√°s altos?",
        "¬øCu√°l es el total de gastos fijos?",
        "¬øC√≥mo se distribuyen mis gastos por categor√≠a?",
        "¬øCu√°l es mi flujo de caja?",
        "¬øCu√°les son mis ingresos y egresos?",
        "¬øCu√°l es el saldo de mi cuenta bancaria?",
        "¬øC√≥mo variaron mis facturas por pagar y por cobrar en los √∫ltimos 2 meses?"
    ]
    
    for i, question in enumerate(questions, 1):
        print(f"{i:2d}. {question}")
    
    print(f"\nüí° El agente puede responder a estas y muchas m√°s preguntas!")
    print("   Solo necesitas hacer la pregunta en lenguaje natural.")


def demo_response_format():
    """Demo del formato de respuesta del agente."""
    print("\n" + "=" * 60)
    print("üìã FORMATO DE RESPUESTA DEL AGENTE")
    print("=" * 60)
    
    print("""
üìä Executive Summary
[Resumen ejecutivo en formato BLUF - Bottom Line Up Front]

üìà Detailed Analysis
[An√°lisis detallado con c√°lculos y m√©tricas]

üîç Data Sources Used
[Fuentes de datos utilizadas con trazabilidad completa]

üí° Key Insights & Recommendations
[Insights clave y recomendaciones para la toma de decisiones]

üìã Technical Details
[Detalles t√©cnicos y metodolog√≠a para verificaci√≥n]
    """)


def demo_installation():
    """Instrucciones de instalaci√≥n."""
    print("\n" + "=" * 60)
    print("üîß INSTRUCCIONES DE INSTALACI√ìN")
    print("=" * 60)
    
    print("""
1. INSTALAR DEPENDENCIAS:
   pip3 install pandas numpy openpyxl

2. VERIFICAR DATOS:
   - Los archivos Excel deben estar en: Datasets v2/Datasets v2/
   - facturas.xlsx
   - gastos_fijos.xlsx  
   - Estado_cuenta.xlsx

3. EJECUTAR TESTS:
   python3 financial_agent/final_data_test.py

4. EJECUTAR DEMO COMPLETO:
   python3 financial_agent/run_demo.py
    """)


def main():
    """Funci√≥n principal del demo."""
    print("üéØ FINANCIAL AGENT - DEMO")
    print("=" * 60)
    
    try:
        # Demo de an√°lisis de datos
        demo_data_analysis()
        
        # Demo de preguntas
        demo_questions()
        
        # Demo de formato de respuesta
        demo_response_format()
        
        # Instrucciones de instalaci√≥n
        demo_installation()
        
        print("\n" + "=" * 60)
        print("‚úÖ DEMO COMPLETADO")
        print("=" * 60)
        print("üéâ El Financial Agent est√° listo para usar!")
        print("üìö Revisa la documentaci√≥n en README.md para m√°s detalles")
        
    except Exception as e:
        print(f"‚ùå Error en el demo: {e}")
        print("üí° Aseg√∫rate de tener las dependencias instaladas y los datos en su lugar")


if __name__ == "__main__":
    main() 