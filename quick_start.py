"""
Quick Start Guide para el Financial Agent.
Ejecuta este script para configurar y probar el agente paso a paso.
"""

import subprocess
import sys
import os
from pathlib import Path


def check_python_version():
    """Verificar versi√≥n de Python."""
    print("üêç Verificando versi√≥n de Python...")
    version = sys.version_info
    if version.major < 3 or (version.major == 3 and version.minor < 8):
        print("‚ùå Error: Se requiere Python 3.8 o superior")
        print(f"   Versi√≥n actual: {version.major}.{version.minor}.{version.micro}")
        return False
    else:
        print(f"‚úÖ Python {version.major}.{version.minor}.{version.micro} - OK")
        return True


def install_dependencies():
    """Instalar dependencias necesarias."""
    print("\nüì¶ Instalando dependencias...")
    
    dependencies = [
        "pandas",
        "numpy", 
        "openpyxl"
    ]
    
    for dep in dependencies:
        try:
            print(f"   Instalando {dep}...")
            subprocess.check_call([sys.executable, "-m", "pip", "install", dep])
            print(f"   ‚úÖ {dep} instalado")
        except subprocess.CalledProcessError:
            print(f"   ‚ùå Error instalando {dep}")
            return False
    
    return True


def check_data_files():
    """Verificar que los archivos de datos est√©n presentes."""
    print("\nüìä Verificando archivos de datos...")
    
    data_directory = Path("Datasets v2/Datasets v2")
    required_files = [
        "facturas.xlsx",
        "gastos_fijos.xlsx", 
        "Estado_cuenta.xlsx"
    ]
    
    if not data_directory.exists():
        print("‚ùå Error: Directorio de datos no encontrado")
        print(f"   Buscando en: {data_directory.absolute()}")
        return False
    
    missing_files = []
    for file in required_files:
        file_path = data_directory / file
        if file_path.exists():
            print(f"   ‚úÖ {file}")
        else:
            print(f"   ‚ùå {file} - NO ENCONTRADO")
            missing_files.append(file)
    
    if missing_files:
        print(f"\n‚ùå Faltan {len(missing_files)} archivos:")
        for file in missing_files:
            print(f"   - {file}")
        return False
    
    print("‚úÖ Todos los archivos de datos est√°n presentes")
    return True


def run_basic_test():
    """Ejecutar test b√°sico de funcionalidad."""
    print("\nüß™ Ejecutando test b√°sico...")
    
    try:
        # Importar m√≥dulos necesarios
        import pandas as pd
        import numpy as np
        from pathlib import Path
        
        print("   ‚úÖ M√≥dulos importados correctamente")
        
        # Test de carga de datos
        data_directory = Path("Datasets v2/Datasets v2")
        facturas_path = data_directory / "facturas.xlsx"
        
        if facturas_path.exists():
            df = pd.read_excel(facturas_path)
            print(f"   ‚úÖ Datos cargados: {len(df)} filas")
            
            # Test de an√°lisis b√°sico
            if 'Monto (MXN)' in df.columns:
                total = df['Monto (MXN)'].sum()
                print(f"   ‚úÖ An√°lisis b√°sico: ${total:,.2f} MXN")
            else:
                print("   ‚ö†Ô∏è  Columna 'Monto (MXN)' no encontrada")
        
        print("   ‚úÖ Test b√°sico completado")
        return True
        
    except Exception as e:
        print(f"   ‚ùå Error en test b√°sico: {e}")
        return False


def run_full_analysis():
    """Ejecutar an√°lisis completo."""
    print("\nüìà Ejecutando an√°lisis completo...")
    
    try:
        # Ejecutar el script de an√°lisis final
        result = subprocess.run([
            sys.executable, "financial_agent/final_data_test.py"
        ], capture_output=True, text=True)
        
        if result.returncode == 0:
            print("   ‚úÖ An√°lisis completo ejecutado exitosamente")
            return True
        else:
            print(f"   ‚ùå Error en an√°lisis: {result.stderr}")
            return False
            
    except Exception as e:
        print(f"   ‚ùå Error ejecutando an√°lisis: {e}")
        return False


def show_next_steps():
    """Mostrar pr√≥ximos pasos."""
    print("\n" + "=" * 60)
    print("üéØ PR√ìXIMOS PASOS")
    print("=" * 60)
    
    print("""
‚úÖ CONFIGURACI√ìN COMPLETADA

Ahora puedes:

1. üìä VER AN√ÅLISIS DETALLADO:
   python3 financial_agent/final_data_test.py

2. üéÆ EJECUTAR DEMO:
   python3 financial_agent/run_demo.py

3. üìö LEER DOCUMENTACI√ìN:
   - README.md - Gu√≠a completa
   - MVP_DOCUMENTATION.md - Detalles t√©cnicos
   - TEST_RESULTS_SUMMARY.md - Resultados de tests

4. üß™ EJECUTAR TESTS ESPEC√çFICOS:
   - financial_agent/simple_data_test.py
   - financial_agent/enhanced_data_test.py
   - financial_agent/validation_tests.py

5. üí° PROBAR PREGUNTAS:
   - "¬øCu√°l es el total de facturas emitidas?"
   - "¬øCu√°les son mis gastos fijos m√°s altos?"
   - "¬øCu√°l es mi flujo de caja?"
   - "¬øC√≥mo variaron mis facturas por pagar y por cobrar en los √∫ltimos 2 meses?"

üéâ ¬°El Financial Agent est√° listo para usar!
    """)


def main():
    """Funci√≥n principal del quick start."""
    print("üöÄ FINANCIAL AGENT - QUICK START")
    print("=" * 60)
    
    steps = [
        ("Verificar Python", check_python_version),
        ("Instalar dependencias", install_dependencies),
        ("Verificar archivos de datos", check_data_files),
        ("Ejecutar test b√°sico", run_basic_test),
        ("Ejecutar an√°lisis completo", run_full_analysis)
    ]
    
    all_passed = True
    
    for step_name, step_func in steps:
        print(f"\nüìã Paso: {step_name}")
        print("-" * 40)
        
        if step_func():
            print(f"‚úÖ {step_name} - COMPLETADO")
        else:
            print(f"‚ùå {step_name} - FALL√ì")
            all_passed = False
            break
    
    if all_passed:
        show_next_steps()
    else:
        print("\n‚ùå CONFIGURACI√ìN FALL√ì")
        print("üí° Revisa los errores arriba y vuelve a intentar")


if __name__ == "__main__":
    main() 