"""
Sistema de Prompt Engineering para el Agente Financiero
Permite respuestas flexibles y naturales a preguntas no pre-configuradas.
"""

from typing import Dict, Any, List
import json

class FinancialPrompts:
    """Sistema de prompts para el agente financiero."""
    
    # Prompt base del sistema
    SYSTEM_PROMPT = """Eres un asistente financiero experto especializado en an√°lisis de datos financieros.
Tu objetivo es proporcionar an√°lisis precisos, √∫tiles y f√°ciles de entender basados en datos de facturas, gastos y estado de cuenta.

CAPACIDADES:
- Analizar facturas por cobrar y por pagar
- Calcular totales, promedios, m√°ximos y m√≠nimos
- Filtrar por fechas, tipos y categor√≠as
- Identificar tendencias y patrones
- Proporcionar insights financieros

ESTILO DE RESPUESTA:
- Usa lenguaje claro y profesional
- Incluye n√∫meros espec√≠ficos cuando sea posible
- Proporciona contexto y explicaciones
- S√© conciso pero completo
- Usa formato estructurado cuando sea apropiado

FORMATO DE DATOS:
- Montos en pesos mexicanos (MXN)
- Fechas en formato legible
- Porcentajes cuando sea relevante
- Comparaciones cuando sea √∫til"""

    # Prompt para an√°lisis de datos
    ANALYSIS_PROMPT = """Analiza los siguientes datos financieros y responde la pregunta del usuario.

DATOS DISPONIBLES:
{data_summary}

PREGUNTA DEL USUARIO:
{user_question}

INSTRUCCIONES:
1. Identifica qu√© datos son relevantes para la pregunta
2. Realiza los c√°lculos necesarios
3. Proporciona una respuesta clara y espec√≠fica
4. Incluye insights adicionales si son √∫tiles
5. Si la pregunta no puede responderse con los datos disponibles, ind√≠calo claramente

RESPUESTA:"""

    # Prompt para interpretaci√≥n de preguntas
    QUESTION_INTERPRETATION_PROMPT = """Analiza la siguiente pregunta financiera y determina:
1. Qu√© tipo de an√°lisis se necesita
2. Qu√© datos son relevantes
3. Si se requiere alg√∫n filtro espec√≠fico

PREGUNTA: {question}

OPCIONES DE AN√ÅLISIS:
- facturas_total: An√°lisis general de todas las facturas
- facturas_por_cobrar: Solo facturas por cobrar
- facturas_por_pagar: Solo facturas por pagar
- facturas_por_fecha: An√°lisis filtrado por fecha
- facturas_por_mes: An√°lisis por mes
- gastos_analisis: An√°lisis de gastos fijos
- flujo_caja: An√°lisis de estado de cuenta
- comparacion: Comparaci√≥n entre diferentes m√©tricas
- tendencia: An√°lisis de tendencias temporales
- personalizado: An√°lisis espec√≠fico no predefinido

RESPONDE EN FORMATO JSON:
{{
    "tipo_analisis": "tipo_identificado",
    "datos_requeridos": ["lista", "de", "datos"],
    "filtros": {{"fecha": "valor", "tipo": "valor"}},
    "especificidad": "alta|media|baja",
    "razonamiento": "explicaci√≥n de por qu√© este an√°lisis"
}}"""

    # Prompt para generaci√≥n de respuestas
    RESPONSE_GENERATION_PROMPT = """Genera una respuesta profesional y √∫til para la siguiente pregunta financiera.

PREGUNTA: {question}

DATOS ANALIZADOS:
{analysis_data}

INSTRUCCIONES:
1. Proporciona una respuesta directa y espec√≠fica
2. Incluye n√∫meros y m√©tricas relevantes
3. Usa formato ejecutivo cuando sea apropiado
4. Agrega insights o recomendaciones si son √∫tiles
5. Mant√©n un tono profesional pero accesible

FORMATO DE RESPUESTA:
üìä Executive Summary
[Resumen ejecutivo de 1-2 l√≠neas]

üìà Detailed Analysis
[An√°lisis detallado con m√©tricas espec√≠ficas]

üí° Key Insights
[Insights y recomendaciones]

üîç Data Sources
[Fuentes de datos utilizadas]"""

    # Prompt para preguntas complejas
    COMPLEX_ANALYSIS_PROMPT = """Analiza esta pregunta financiera compleja y proporciona una respuesta integral.

PREGUNTA: {question}

DATOS DISPONIBLES:
{available_data}

INSTRUCCIONES:
1. Descomp√≥n la pregunta en partes m√°s simples
2. Realiza m√∫ltiples an√°lisis si es necesario
3. Combina los resultados de manera coherente
4. Proporciona una respuesta completa y bien estructurada
5. Incluye comparaciones y contexto cuando sea relevante

RESPUESTA:"""

    # Prompt para casos no pre-configurados
    FLEXIBLE_ANALYSIS_PROMPT = """Esta pregunta no est√° pre-configurada. Usa tu capacidad de an√°lisis para proporcionar la mejor respuesta posible.

PREGUNTA: {question}

DATOS DISPONIBLES:
{data_summary}

INSTRUCCIONES:
1. Identifica qu√© aspectos de la pregunta puedes responder
2. Usa los datos disponibles de manera creativa
3. Proporciona an√°lisis relevantes aunque no sean exactamente lo solicitado
4. Sugiere an√°lisis alternativos si es apropiado
5. S√© transparente sobre las limitaciones

RESPUESTA:"""

    @staticmethod
    def format_data_summary(data: Dict[str, Any]) -> str:
        """Formatear resumen de datos para prompts."""
        summary = []
        
        if 'facturas' in data:
            facturas = data['facturas']
            summary.append(f"üìÑ FACTURAS: {len(facturas)} registros")
            if 'total' in facturas:
                summary.append(f"   - Total: ${facturas['total']:,.2f} MXN")
            if 'por_cobrar' in facturas:
                summary.append(f"   - Por cobrar: ${facturas['por_cobrar']:,.2f} MXN")
            if 'por_pagar' in facturas:
                summary.append(f"   - Por pagar: ${facturas['por_pagar']:,.2f} MXN")
        
        if 'gastos_fijos' in data:
            gastos = data['gastos_fijos']
            summary.append(f"üí∞ GASTOS FIJOS: {len(gastos)} registros")
            if 'total_gastos' in gastos:
                summary.append(f"   - Total: ${gastos['total_gastos']:,.2f} MXN")
        
        if 'estado_cuenta' in data:
            cuenta = data['estado_cuenta']
            summary.append(f"üè¶ ESTADO DE CUENTA: {len(cuenta)} registros")
            if 'total_movimientos' in cuenta:
                summary.append(f"   - Total: ${cuenta['total_movimientos']:,.2f} MXN")
        
        return "\n".join(summary)

    @staticmethod
    def create_analysis_prompt(question: str, data: Dict[str, Any]) -> str:
        """Crear prompt para an√°lisis de datos."""
        data_summary = FinancialPrompts.format_data_summary(data)
        return FinancialPrompts.ANALYSIS_PROMPT.format(
            data_summary=data_summary,
            user_question=question
        )

    @staticmethod
    def create_interpretation_prompt(question: str) -> str:
        """Crear prompt para interpretaci√≥n de preguntas."""
        return FinancialPrompts.QUESTION_INTERPRETATION_PROMPT.format(
            question=question
        )

    @staticmethod
    def create_response_prompt(question: str, analysis_data: Dict[str, Any]) -> str:
        """Crear prompt para generaci√≥n de respuestas."""
        return FinancialPrompts.RESPONSE_GENERATION_PROMPT.format(
            question=question,
            analysis_data=json.dumps(analysis_data, indent=2, default=str)
        )

    @staticmethod
    def create_complex_analysis_prompt(question: str, data: Dict[str, Any]) -> str:
        """Crear prompt para an√°lisis complejo."""
        data_summary = FinancialPrompts.format_data_summary(data)
        return FinancialPrompts.COMPLEX_ANALYSIS_PROMPT.format(
            question=question,
            available_data=data_summary
        )

    @staticmethod
    def create_flexible_analysis_prompt(question: str, data: Dict[str, Any]) -> str:
        """Crear prompt para casos no pre-configurados."""
        data_summary = FinancialPrompts.format_data_summary(data)
        return FinancialPrompts.FLEXIBLE_ANALYSIS_PROMPT.format(
            question=question,
            data_summary=data_summary
        )


class PromptManager:
    """Gestor de prompts para el agente financiero."""
    
    def __init__(self):
        self.prompts = FinancialPrompts()
        self.conversation_history = []
    
    def add_to_history(self, role: str, content: str):
        """Agregar mensaje al historial de conversaci√≥n."""
        self.conversation_history.append({
            "role": role,
            "content": content,
            "timestamp": "now"  # En implementaci√≥n real usar datetime
        })
    
    def get_context_prompt(self, question: str, data: Dict[str, Any]) -> str:
        """Obtener prompt con contexto de conversaci√≥n."""
        context = ""
        if self.conversation_history:
            context = "\n\nCONTEXTO DE CONVERSACI√ìN PREVIA:\n"
            for msg in self.conversation_history[-3:]:  # √öltimos 3 mensajes
                context += f"{msg['role'].upper()}: {msg['content']}\n"
        
        return f"{FinancialPrompts.SYSTEM_PROMPT}\n{context}\n{self.prompts.create_analysis_prompt(question, data)}"
    
    def clear_history(self):
        """Limpiar historial de conversaci√≥n."""
        self.conversation_history = []


# Funciones de utilidad para prompts
def create_simple_prompt(question: str, data: Dict[str, Any]) -> str:
    """Crear prompt simple para an√°lisis b√°sico."""
    return f"""
Analiza estos datos financieros y responde: {question}

DATOS:
{FinancialPrompts.format_data_summary(data)}

RESPUESTA:"""


def create_comparison_prompt(question: str, data: Dict[str, Any]) -> str:
    """Crear prompt para an√°lisis comparativo."""
    return f"""
Realiza un an√°lisis comparativo para: {question}

DATOS DISPONIBLES:
{FinancialPrompts.format_data_summary(data)}

INSTRUCCIONES:
1. Identifica los elementos a comparar
2. Calcula las diferencias y similitudes
3. Proporciona insights sobre las comparaciones
4. Sugiere conclusiones relevantes

AN√ÅLISIS:"""


def create_trend_analysis_prompt(question: str, data: Dict[str, Any]) -> str:
    """Crear prompt para an√°lisis de tendencias."""
    return f"""
Analiza las tendencias para: {question}

DATOS DISPONIBLES:
{FinancialPrompts.format_data_summary(data)}

INSTRUCCIONES:
1. Identifica patrones temporales
2. Calcula tasas de crecimiento/decrecimiento
3. Identifica picos y valles
4. Proyecta tendencias futuras si es posible
5. Proporciona recomendaciones basadas en tendencias

AN√ÅLISIS DE TENDENCIAS:""" 