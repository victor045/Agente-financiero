#!/usr/bin/env python3
"""
Test para el agente financiero con LLM.
"""

import sys
import os
from pathlib import Path

# Agregar el directorio actual al path
sys.path.insert(0, str(Path(__file__).parent))

from enhanced_financial_agent_with_llm import EnhancedFinancialAgentWithLLM, FinancialAgentConfig

def test_llm_agent():
    """Test del agente con LLM."""
    print("üß™ TESTING ENHANCED FINANCIAL AGENT WITH LLM")
    print("=" * 60)
    
    # Verificar API key
    api_key = os.getenv('OPENAI_API_KEY')
    if not api_key:
        print("‚ö†Ô∏è  OPENAI_API_KEY no encontrada")
        print("üí° Configura tu API key: export OPENAI_API_KEY='tu-api-key'")
        return
    
    # Configurar agente sin visualizaci√≥n para testing
    config = FinancialAgentConfig(
        enable_llm=True,
        enable_dynamic_visualization=False,
        enable_feedback=False
    )
    
    agent = EnhancedFinancialAgentWithLLM(config)
    
    # Lista de preguntas para testear
    test_questions = [
        ("De las facturas por pagar cu√°l es la m√°s alta?", "Factura por pagar m√°s alta"),
        ("Cu√°l es el total de facturas por cobrar emitidas en mayo?", "Facturas por cobrar en mayo"),
        ("Cual fue el mes con mas facturas?", "Mes con m√°s facturas"),
        ("y cual es el mes con menos facturas?", "Mes con menos facturas - LLM"),
        ("C√≥mo variaron por mes las facturas por cobrar y por pagar? considera la fecha de emisi√≥n", "Variaci√≥n mensual - LLM"),
        ("Cu√°l es el proveedor que mayor monto total de facturas por pagar emiti√≥?", "Proveedor con mayor monto"),
        ("cu√°l es el proveedor que ha tenido la factura por pagar con los t√©rminos de pago m√°s generosos?", "Proveedor con t√©rminos m√°s generosos - LLM")
    ]
    
    for i, (question, description) in enumerate(test_questions, 1):
        print(f"\nüìã TEST {i}: {description}")
        print(f"‚ùì Pregunta: {question}")
        
        try:
            response = agent.process_question(question)
            print(f"‚úÖ Respuesta: {response[:300]}...")
            
            # Verificar si us√≥ LLM
            if "LLM REAL" in response:
                print("ü§ñ ‚úÖ Us√≥ LLM real")
            elif "predefinida" in response:
                print("üìã ‚úÖ Us√≥ respuesta predefinida")
            else:
                print("‚ùì Tipo de respuesta no identificado")
                
        except Exception as e:
            print(f"‚ùå Error: {e}")
    
    print("\nüéØ TEST COMPLETADO")

if __name__ == "__main__":
    test_llm_agent() 